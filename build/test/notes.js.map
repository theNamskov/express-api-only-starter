{"version":3,"sources":["../../src/test/notes.js"],"names":["should","chai","expect","use","chaiHttp","describe","notes","it","done","request","server","get","end","err","res","body","data","docs","have","status","success","to","equal","_id","be","an","property","console","log"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;AACA,IAAIA,MAAM,GAAGC,iBAAKD,MAAL,EAAb;;AACA,IAAIE,MAAM,GAAGD,iBAAKC,MAAlB,C,CACA;;AAGAD,iBAAKE,GAAL,CAASC,oBAAT;;AAEAC,QAAQ,CAAC,WAAD,EAAa,YAAM;AACvB;AACJ;AACA;AACI,MAAIC,KAAJ,CAJuB,CAMvB;AACA;AACI;AACJ;;AAEA;AACJ;AACA;AACI;AACI;AACJ;;AAEA;AACJ;AACA;AACI;AACI;AACJ;;AAEA;AACJ;AACA;;AACID,EAAAA,QAAQ,CAAC,mBAAD,EAAqB,YAAM;AAC/BE,IAAAA,EAAE,CAAC,6BAAD,EAAgC,UAACC,IAAD,EAAU;AACxCP,uBAAKQ,OAAL,CAAaC,iBAAb,EACKC,GADL,CACS,eADT,EAEKC,GAFL,CAES,UAACC,GAAD,EAAKC,GAAL,EAAa;AACd,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACAT,QAAAA,KAAK,GAAGQ,GAAG,CAACC,IAAJ,CAASC,IAAT,CAAcC,IAAtB;AACAH,QAAAA,GAAG,CAACd,MAAJ,CAAWkB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAjB,QAAAA,MAAM,CAACa,IAAI,CAACK,OAAN,CAAN,CAAqBC,EAArB,CAAwBC,KAAxB,CAA8B,IAA9B;AACAd,QAAAA,IAAI;AACP,OARL;AASH,KAVC,CAAF;AAWH,GAZO,CAAR;AAcA;AACJ;AACA;;AAEKH,EAAAA,QAAQ,CAAC,uBAAD,EAAyB,YAAM;AACpCE,IAAAA,EAAE,CAAC,2BAAD,EAA8B,UAACC,IAAD,EAAU;AACtCP,uBAAKQ,OAAL,CAAaC,iBAAb,EACKC,GADL,yBAC0BL,KAAK,CAAC,CAAD,CAAL,CAASiB,GADnC,GAEKX,GAFL,CAES,UAACC,GAAD,EAAKC,GAAL,EAAa;AACd,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACAD,QAAAA,GAAG,CAACd,MAAJ,CAAWkB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAjB,QAAAA,MAAM,CAACa,IAAI,CAACK,OAAN,CAAN,CAAqBC,EAArB,CAAwBC,KAAxB,CAA8B,IAA9B;AACAd,QAAAA,IAAI;AACP,OAPL;AAQH,KATC,CAAF;AAUH,GAXQ,CAAR;AAaD;AACJ;AACA;;AAEI;AACJ;AACA;;AAEKH,EAAAA,QAAQ,CAAC,qBAAD,EAAuB,YAAM;AAClCE,IAAAA,EAAE,CAAC,qBAAD,6FAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEC,gCAAa,EAAb,CAFD;;AAAA;AAEbD,cAAAA,MAFa;AAGnBJ,cAAAA,MAAM,CAACI,MAAK,CAACW,IAAP,CAAN,CAAmBI,EAAnB,CAAsBG,EAAtB,CAAyBC,EAAzB,CAA4B,OAA5B;AACAvB,cAAAA,MAAM,CAACI,MAAD,CAAN,CAAce,EAAd,CAAiBH,IAAjB,CAAsBQ,QAAtB,CAA+B,MAA/B;AAJmB;AAAA;;AAAA;AAAA;AAAA;AAMnB;AACAC,cAAAA,OAAO,CAACC,GAAR;;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB,GAAF;AAYH,GAbQ,CAAR;AAeJ,CAlFO,CAAR","sourcesContent":["import chai from \"chai\"\nimport chaiHttp from \"chai-http\"\nimport faker from \"faker\"\nimport server from \"../main/index\"\nimport supertest from \"supertest\"\nimport {database} from '../main/config/database'\nimport {\n    viewAllNotes\n} from \"../main/app/notes/notesService.js\"\n\n// Assertion Style\nlet should = chai.should()\nlet expect = chai.expect\n// const expect = require('chai').expect\n\n\nchai.use(chaiHttp)\n\ndescribe(\"Notes API\",() => {\n    /**\n     * This variable will be used to hold the notes from the Find All Call\n     */\n    let notes;\n\n    // This function will run before every test\n    // beforeEach((done) => {\n        //\n    // });\n\n    /**\n     * This function will once before all the test\n     */\n    // before(async () => {\n        // COnnect to the DB\n    //  });\n\n    /**\n     * This function will run after all the test is completed\n     */\n    //  after(async () => {\n        // Drop the DB\n    //  });\n    \n    /**\n     *  Test GET Route\n     */\n    describe(\"GET /api/v1/notes\",() => {\n        it(\"It should GET all the notes\", (done) => {\n            chai.request(server)\n                .get('/api/v1/notes')\n                .end((err,res) => {\n                    const body = res.body\n                    notes = res.body.data.docs\n                    res.should.have.status(200)\n                    expect(body.success).to.equal(true)\n                    done();\n                })\n        })\n    })\n\n    /**\n     *  Test GET (by id) Route\n     */\n\n     describe(\"GET /api/v1/notes/:id\",() => {\n        it(\"It should GET note by :id\", (done) => {\n            chai.request(server)\n                .get(`/api/v1/notes/${notes[0]._id}`)\n                .end((err,res) => {\n                    const body = res.body\n                    res.should.have.status(200)\n                    expect(body.success).to.equal(true)\n                    done();\n                })\n        })\n    })\n\n    /**\n     *  Test POST Route\n     */\n\n    /**\n     * Testing a Note Services\n     */\n\n     describe(\"View Notes Services\",() => {\n        it(\"Testing the Service\", async () => {\n           try {\n               const notes = await viewAllNotes(10)\n               expect(notes.docs).to.be.an('array')\n               expect(notes).to.have.property('docs')\n           } catch (error) {\n               // Expect the errors here\n               console.log(error);\n           }\n            \n        })\n        \n    })\n    \n})"],"file":"notes.js"}